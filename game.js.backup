// Fate Keys 命運節奏 - 主要遊戲邏輯
// ===============================

// ===============================
// 音訊管理器 (Audio Manager)
// ===============================
const audioManager = {
    // 音訊實例
    bgmAudio: null,        // 背景音樂 (Drive.mp3)
    previewAudio: null,    // 預覽音樂
    gameAudio: null,       // 遊戲音樂
    
    // 當前狀態
    currentPreviewSong: null,
    isBgmPlaying: false,
    isPreviewPlaying: false,
    isGamePlaying: false,
    
    // 防抖機制
    previewTimeout: null,
    
    // 音訊路徑設定
    audioPaths: {
        bgm: 'DRIVE.mp3',
        songs: {
            'Champion.mp3': 'Champion.mp3',
            'Bliss.mp3': 'Bliss.mp3',
            'Canon.mp3': 'Canon.mp3',
            'HappyBirthday.mp3': 'HappyBirthday.mp3',
            'MainTheme.mp3': 'MainTheme.mp3',
            'MagicalMoments.mp3': 'MagicalMoments.mp3',
            'Noise.mp3': 'Noise.mp3',
            'HammerMASTER.mp3': 'HammerMASTER.mp3',
            'InspiringDreams.mp3': 'InspiringDreams.mp3',
            'inspiringguitar.mp3': 'inspiringguitar.mp3'
        }
    },
    
    /**
     * 初始化背景音樂
     */
    initBgm() {
        try {
            this.bgmAudio = new Audio(this.audioPaths.bgm);
            this.bgmAudio.loop = true;
            this.bgmAudio.volume = 0.5;
            console.log('🎵 背景音樂初始化完成');
        } catch (error) {
            console.error('❌ 背景音樂初始化失敗:', error);
        }
    },
    
    /**
     * 播放背景音樂
     */
    playBgm() {
        if (!this.bgmAudio) {
            this.initBgm();
        }
        
        if (this.bgmAudio && this.bgmAudio.paused) {
            this.bgmAudio.play()
                .then(() => {
                    this.isBgmPlaying = true;
                    console.log('🎵 背景音樂開始播放');
                })
                .catch(error => {
                    if (error.name === 'NotAllowedError') {
                        console.log('⚠️ 需要用戶互動才能播放音樂，請點擊畫面');
                    } else {
                        console.error('❌ 背景音樂播放失敗:', error);
                    }
                    this.isBgmPlaying = false;
                });
        }
    },
    
    /**
     * 停止背景音樂
     */
    stopBgm() {
        if (this.bgmAudio && !this.bgmAudio.paused) {
            this.bgmAudio.pause();
            this.bgmAudio.currentTime = 0;
            this.isBgmPlaying = false;
            console.log('🔇 背景音樂已停止');
        }
    },
    
    /**
     * 播放預覽音樂（帶防抖機制）
     * @param {string} songName - 歌曲檔案名稱
     */
    playPreview(songName) {
        // 清除之前的防抖計時器
        if (this.previewTimeout) {
            clearTimeout(this.previewTimeout);
        }
        
        // 如果已經在預覽同一首歌，不重複播放
        if (this.currentPreviewSong === songName && this.isPreviewPlaying) {
            return;
        }
        
        // 立即停止當前預覽
        this.stopPreview();
        
        // 防抖：延遲 100ms 再播放，避免快速切換造成的 AbortError
        this.previewTimeout = setTimeout(() => {
            // 停止背景音樂
            this.stopBgm();
            
            try {
                const songPath = this.audioPaths.songs[songName];
                if (!songPath) {
                    console.error('❌ 找不到歌曲:', songName);
                    return;
                }
                
                this.previewAudio = new Audio(songPath);
                
                // 設定音量：卡農特別大聲
                if (songName === 'Canon.mp3') {
                    this.previewAudio.volume = 0.8;
                } else {
                    this.previewAudio.volume = 0.6;
                }
                
                // 設定預覽起始點：卡農從10秒開始
                if (songName === 'Canon.mp3') {
                    this.previewAudio.currentTime = 10; // 卡農從10秒開始
                } else {
                    this.previewAudio.currentTime = 10; // 其他歌曲從10秒開始
                }
                
                this.previewAudio.play()
                    .then(() => {
                        this.currentPreviewSong = songName;
                        this.isPreviewPlaying = true;
                        console.log(`🎵 預覽音樂開始播放: ${songName}`);
                    })
                    .catch(error => {
                        // 忽略 AbortError（播放被中斷）
                        if (error.name === 'AbortError') {
                            console.log(`🔇 預覽音樂播放被中斷: ${songName}`);
                        } else if (error.name === 'NotAllowedError') {
                            console.log('⚠️ 需要用戶互動才能播放預覽音樂');
                            // 恢復背景音樂
                            this.playBgm();
                        } else {
                            console.error('❌ 預覽音樂播放失敗:', error);
                            this.playBgm();
                        }
                    });
            } catch (error) {
                console.error('❌ 預覽音樂初始化失敗:', error);
                this.playBgm();
            }
        }, 100);
    },
    
    /**
     * 停止預覽音樂
     */
    stopPreview() {
        if (this.previewAudio) {
            try {
                this.previewAudio.pause();
                this.previewAudio.currentTime = 0;
                this.previewAudio = null;
            } catch (error) {
                // 忽略停止時的錯誤
                console.log('🔇 預覽音樂停止時發生錯誤（可忽略）');
            }
        }
        this.currentPreviewSong = null;
        this.isPreviewPlaying = false;
        console.log('🔇 預覽音樂已停止');
    },
    
    /**
     * 播放遊戲音樂
     * @param {string} songName - 歌曲檔案名稱
     * @param {number} offsetSec - 播放起始秒數
     * @param {Function} onStart - 播放開始回調
     */
    playGameMusic(songName, offsetSec = 0, onStart = null) {
        // 停止所有其他音樂
        this.stopBgm();
        this.stopPreview();
        
        try {
            const songPath = this.audioPaths.songs[songName];
            if (!songPath) {
                console.error('❌ 找不到遊戲歌曲:', songName);
                if (onStart) onStart();
                return;
            }
            
            this.gameAudio = new Audio(songPath);
            
            // 設定音量：卡農特別大聲
            if (songName === 'Canon.mp3') {
                this.gameAudio.volume = 0.9;
            } else {
                this.gameAudio.volume = 0.8;
            }
            
            this.gameAudio.currentTime = offsetSec;
            
            // 設定結束事件
            if (songName === 'HappyBirthday.mp3') {
                this.gameAudio.onended = () => {
                    // 生日快樂歌循環播放
                    this.playGameMusic(songName, offsetSec, onStart);
                };
            } else {
                this.gameAudio.onended = () => {
                    // 遊戲結束
                    if (typeof endGame === 'function') {
                        endGame();
                    }
                };
            }
            
            this.gameAudio.play()
                .then(() => {
                    this.isGamePlaying = true;
                    console.log(`🎮 遊戲音樂開始播放: ${songName} (從 ${offsetSec}s 開始)`);
                    if (onStart) onStart();
                })
                .catch(error => {
                    if (error.name === 'NotAllowedError') {
                        console.log('⚠️ 需要用戶互動才能播放遊戲音樂');
                    } else {
                        console.error('❌ 遊戲音樂播放失敗:', error);
                    }
                    this.isGamePlaying = false;
                    if (onStart) onStart();
                });
        } catch (error) {
            console.error('❌ 遊戲音樂初始化失敗:', error);
            this.isGamePlaying = false;
            if (onStart) onStart();
        }
    },
    
    /**
     * 停止遊戲音樂
     */
    stopGameMusic() {
        if (this.gameAudio) {
            try {
                this.gameAudio.pause();
                this.gameAudio.currentTime = 0;
                this.gameAudio = null;
            } catch (error) {
                // 忽略停止時的錯誤
                console.log('🔇 遊戲音樂停止時發生錯誤（可忽略）');
            }
        }
        this.isGamePlaying = false;
        console.log('🔇 遊戲音樂已停止');
    },
    
    /**
     * 停止所有音樂
     */
    stopAll() {
        this.stopBgm();
        this.stopPreview();
        this.stopGameMusic();
        console.log('🔇 所有音樂已停止');
    },
    
    /**
     * 恢復背景音樂（用於遊戲結束後）
     */
    resumeBgm() {
        this.stopGameMusic();
        this.stopPreview();
        this.playBgm();
    }
};

// 取得 DOM 元素
const gameArea = document.getElementById('game-area');
const resultScreen = document.getElementById('result-screen');
const canvas = document.getElementById('game-canvas');
const ctx = canvas.getContext('2d');
const keyHints = document.querySelectorAll('.key');
const scoreDisplay = document.getElementById('score-display');
const comboDisplay = document.getElementById('combo-display');
const finalScore = document.getElementById('final-score');
const finalGrade = document.getElementById('final-grade');
const restartBtn = document.getElementById('restart-btn');
const backBtn = document.getElementById('back-btn');
const selectArea = document.getElementById('select-area');
const songSelect = document.getElementById('song');
const startBtn = document.getElementById('start-btn');
const difficultyBtns = document.querySelectorAll('.difficulty-btn');
const songCards = document.querySelectorAll('.song-card');
const confirmBtn = document.getElementById('confirm-btn');

// 遊戲設定
const KEY_LIST = ['A', 'S', 'D', 'F', 'G'];
const KEY_COLORS = ['#ff6f91', '#4ecdc4', '#ffe066', '#5f6fff', '#ffb347'];
let currentDifficulty = null; // 一開始不選難度
let selectedSong = null; // 一開始不選歌曲
let gamePlayCount = 0; // 遊戲次數追蹤

// 難度設定物件
const difficultySettings = {
    easy: {
        name: "🎵 入門演奏 Beginner",
        noteSpeed: 1.6,
        judgementRange: 150,
        minNoteGap: 800,
        allowChords: false,
        perfectScore: 500,
        goodScore: 200,
        missScore: 0
    },
    normal: {
        name: "🎶 基礎演奏 Intermediate",
        noteSpeed: 1.2,
        judgementRange: 100,
        minNoteGap: 600,
        allowChords: true,
        perfectScore: 500,
        goodScore: 200,
        missScore: 0
    },
    hard: {
        name: "🎼 高級演奏 Advanced",
        noteSpeed: 0.9,
        judgementRange: 75,
        minNoteGap: 400,
        allowChords: true,
        perfectScore: 500,
        goodScore: 200,
        missScore: 0
    },
    master: {
        name: "🎹 命運獨奏 Fate Solo",
        noteSpeed: 0.6,
        judgementRange: 50,
        minNoteGap: 250,
        allowChords: true,
        perfectScore: 500,
        goodScore: 200,
        missScore: 0
    },
    final: {
        name: "🌟 終極幻想 Final Encore",
        noteSpeed: 0.4,
        judgementRange: 30,
        minNoteGap: 200,
        allowChords: true,
        perfectScore: 500,
        goodScore: 200,
        missScore: 0
    }
};

// 遊戲時長（統一60秒）
const GAME_SECONDS = 60;

// 遊戲狀態
let notes = [];
let currentNoteIndex = 0;
let startTime = 0;
let score = 0;
let combo = 0;
let maxCombo = 0;
let isPlaying = false;
let animationId = null;
let endTimer = null;
let timerInterval = null;

// ===============================
// 畫面切換
// ===============================
function showScreen(screen) {
    // 先隱藏所有畫面
    if (gameArea) gameArea.style.display = 'none';
    if (resultScreen) resultScreen.style.display = 'none';
    if (selectArea) selectArea.style.display = 'none';
    
    // 顯示指定畫面
    if (screen === 'game' && gameArea) {
        gameArea.style.display = 'flex';
        // 重新調整 Canvas 大小
        resizeCanvas();
    } else if (screen === 'result' && resultScreen) {
        resultScreen.style.display = 'flex';
    } else if (screen === 'select' && selectArea) {
        selectArea.style.display = 'flex';
    }
}

// ===============================
// 產生音符陣列（支援複音與間距控制）
// ===============================
function generateNotes(difficulty, duration = 60) {
    const settings = difficultySettings[difficulty];
    const notes = [];
    const minInterval = settings.minNoteGap / 1000; // 轉換為秒
    const allowChords = settings.allowChords;
    
    let currentTime = 0;
    let lastNoteTime = -minInterval; // 確保第一顆音符可以立即出現
    
    while (currentTime < duration) {
        // 決定這次要產生幾個音符（複音）
        let noteCount = 1;
        if (allowChords && Math.random() < 0.3) { // 30% 機率產生複音
            noteCount = Math.min(3, Math.floor(Math.random() * 3) + 1); // 最多3個音符同時
        }
        
        // 產生音符
        const lanes = [];
        for (let i = 0; i < noteCount; i++) {
            let lane;
            if (i === 0) {
                // 第一個音符：避免與上一次相同
                const availableLanes = [0, 1, 2, 3, 4].filter(l => l !== (notes.length > 0 ? notes[notes.length - 1].lane : -1));
                lane = availableLanes[Math.floor(Math.random() * availableLanes.length)];
            } else {
                // 複音音符：避免與同組其他音符相同
                const availableLanes = [0, 1, 2, 3, 4].filter(l => !lanes.includes(l));
                lane = availableLanes[Math.floor(Math.random() * availableLanes.length)];
            }
            lanes.push(lane);
            
            notes.push({
                time: currentTime,
                lane: lane,
                hit: false,
                anim: 0,
                polyphonyGroup: currentTime // 用於識別同組複音
            });
        }
        
        // 計算下一個音符的時間
        const baseInterval = minInterval;
        const randomVariation = Math.random() * 0.5 + 0.75; // 0.75-1.25 倍隨機變化
        const nextInterval = baseInterval * randomVariation;
        
        currentTime += nextInterval;
    }
    
    // 按時間排序
    notes.sort((a, b) => a.time - b.time);
    
    return notes;
}

// ===============================
// 遊戲開始與重啟
// ===============================
if (restartBtn) restartBtn.addEventListener('click', () => {
    // 只重設遊戲狀態，不重設選擇，直接重新開始
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
    if (endTimer) {
        clearTimeout(endTimer);
        endTimer = null;
    }
    // 停止所有音樂
    audioManager.stopAll();
    // 使用 showScreen 函數正確切換畫面
    showScreen('game');
    setTimeout(() => startGame(), 1000);
});
if (backBtn) backBtn.addEventListener('click', () => {
    // 使用 showScreen 函數正確切換畫面
    showScreen('select');
    // 停止試聽音樂，恢復背景音樂
    audioManager.stopPreview();
});
if (startBtn) startBtn.addEventListener('click', () => {
    if (!selectedSong || !currentDifficulty) return;
    startGame();
});

// 響應式 Canvas 畫面比例調整
function resizeCanvas() {
    // 以 3:4 比例自動縮放，最大 480x640
    let w = Math.min(window.innerWidth * 0.98, 480);
    let h = w * 4 / 3;
    if (h > window.innerHeight * 0.8) {
        h = window.innerHeight * 0.8;
        w = h * 3 / 4;
    }
    canvas.width = w;
    canvas.height = h;
}
window.addEventListener('resize', resizeCanvas);

function startGame() {
    // 停止所有音樂，開始遊戲音樂
    audioManager.stopAll();
    
    notes = generateNotes(currentDifficulty, GAME_SECONDS); // 產生音符
    currentNoteIndex = 0;
    score = 0;
    combo = 0;
    maxCombo = 0;
    isPlaying = true;
    scoreDisplay.textContent = '分數：0';
    comboDisplay.textContent = '';
    showScreen('game');
    resizeCanvas();
    
    // 設定計時器
    let remain = GAME_SECONDS;
    const timerDisplay = document.getElementById('timer-display');
    if (timerInterval) clearInterval(timerInterval);
    if (timerDisplay) timerDisplay.textContent = `剩餘：${remain.toFixed(1)} 秒`;
    timerInterval = setInterval(() => {
        if (!isPlaying) return;
        remain -= 0.1;
        if (remain < 0) remain = 0;
        if (timerDisplay) timerDisplay.textContent = `剩餘：${remain.toFixed(1)} 秒`;
    }, 100);
    
    // 設定遊戲音樂播放起始點
    let offsetSec = 10; // 所有歌曲都從10秒開始播放
    
    // 使用 audioManager 播放遊戲音樂
    audioManager.playGameMusic(selectedSong, offsetSec, () => {
        // 音樂真正開始播放時才設定 startTime，確保音符與音樂同步
        startTime = performance.now();
        animationId = requestAnimationFrame(gameLoop);
        if (endTimer) clearTimeout(endTimer);
        endTimer = setTimeout(() => {
            endGame();
        }, GAME_SECONDS * 1000);
    });
}

// ===============================
// Canvas 動畫主迴圈
// ===============================
function gameLoop(now) {
    if (!isPlaying) return;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBackground(now);
    drawNotes(now);
    animationId = requestAnimationFrame(gameLoop);
}

function drawBackground(now) {
    for (let i = 0; i < 30; i++) {
        const x = (now / 10 + i * 50) % canvas.width;
        const y = (now / 5 + i * 80) % canvas.height;
        ctx.beginPath();
        ctx.arc(x, y, 2 + (i % 3), 0, 2 * Math.PI);
        ctx.fillStyle = i % 2 === 0 ? '#4ecdc4' : '#ffb347';
        ctx.globalAlpha = 0.18;
        ctx.fill();
        ctx.globalAlpha = 1;
    }
}

function drawNotes(now) {
    const elapsed = (now - startTime) / 1000;
    const settings = difficultySettings[currentDifficulty];
    const laneWidth = canvas.width / KEY_LIST.length;
    const noteHeight = 32;
    for (let i = currentNoteIndex; i < notes.length; i++) {
        const note = notes[i];
        if (note.hit && note.anim >= 1) continue; // 動畫結束才消失
        const dropTime = note.time; // 立即落下
        const y = (elapsed - dropTime) * (180 / settings.noteSpeed) + 60;
        if (y + noteHeight/2 > canvas.height) continue; // 只有音符底部超過畫面底端才消失
        if (y < -noteHeight) continue;
        let scale = 1;
        if (note.hit && note.anim < 1) {
            scale = 1 - note.anim;
            note.anim += 0.08;
        }
        ctx.save();
        ctx.translate(note.lane * laneWidth + laneWidth / 2, y + noteHeight / 2);
        ctx.scale(scale, scale);
        ctx.fillStyle = KEY_COLORS[note.lane];
        ctx.strokeStyle = '#fff';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.roundRect(-laneWidth/2 + 10, -noteHeight/2, laneWidth - 20, noteHeight, 10);
        ctx.fill();
        ctx.stroke();
        ctx.restore();
    }
    ctx.strokeStyle = '#fff';
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.moveTo(0, canvas.height - 100);
    ctx.lineTo(canvas.width, canvas.height - 100);
    ctx.stroke();
}

// ===============================
// 鍵盤事件與判定
// ===============================
document.addEventListener('keydown', (e) => {
    if (!isPlaying) return;
    const key = e.key.toUpperCase();
    const lane = KEY_LIST.indexOf(key);
    if (lane === -1) return;
    keyHints[lane].classList.add('active');
    setTimeout(() => keyHints[lane].classList.remove('active'), 120);
    judgeNote(lane);
});

function judgeNote(lane) {
    const now = (performance.now() - startTime) / 1000;
    const settings = difficultySettings[currentDifficulty];
    const judgeLineY = canvas.height - 100;
    const noteHeight = 32;
    
    // 尋找當前可以擊打的音符
    for (let i = currentNoteIndex; i < notes.length; i++) {
        const note = notes[i];
        if (note.lane !== lane || note.hit) continue;
        
        // 計算音符位置
        const y = (now - note.time) * (180 / settings.noteSpeed) + 60;
        
        // 檢查是否在判定範圍內
        const distanceFromJudgeLine = Math.abs(y - judgeLineY);
        
        if (distanceFromJudgeLine <= settings.judgementRange) {
            // 在判定範圍內，計算判定等級
            let judgeType = 'Miss';
            if (distanceFromJudgeLine <= settings.judgementRange * 0.3) {
                judgeType = 'Perfect';
            } else if (distanceFromJudgeLine <= settings.judgementRange * 0.7) {
                judgeType = 'Good';
            }
            
            hitNote(i, judgeType);
            return;
        }
        
        // 如果音符還沒到判定線，允許重複嘗試
        if (y < judgeLineY - settings.judgementRange) {
            // 音符還沒到，不扣分，可以重複按
            return;
        }
        
        // 如果音符已經超過判定線太多，算 Miss
        if (y > judgeLineY + settings.judgementRange) {
            missNote();
            note.hit = true;
            if (i === currentNoteIndex) currentNoteIndex++;
            return;
        }
    }
    
    // 沒有找到對應的音符，算 Miss
    missNote();
}

function hitNote(index, type) {
    const settings = difficultySettings[currentDifficulty];
    notes[index].hit = true;
    notes[index].anim = 0; // 啟動動畫
    
    // 更新 currentNoteIndex
    if (index === currentNoteIndex) {
        while (notes[currentNoteIndex] && notes[currentNoteIndex].hit) currentNoteIndex++;
    }
    
    // 計算分數
    let addScore = 0;
    switch (type) {
        case 'Perfect':
            addScore = settings.perfectScore;
            break;
        case 'Good':
            addScore = settings.goodScore;
            break;
        case 'Miss':
            addScore = settings.missScore;
            break;
    }
    
    score += addScore;
    combo++;
    maxCombo = Math.max(combo, maxCombo);
    
    scoreDisplay.textContent = `分數：${score}`;
    comboDisplay.textContent = `${type}! Combo x${combo}`;
    
    // 根據判定類型設定顏色
    switch (type) {
        case 'Perfect':
            comboDisplay.style.color = '#ffb347';
            break;
        case 'Good':
            comboDisplay.style.color = '#4ecdc4';
            break;
        case 'Miss':
            comboDisplay.style.color = '#ff6f91';
            break;
    }
    
    // Combo/分數 閃爍動畫
    scoreDisplay.style.textShadow = '0 0 16px #fff, 0 0 32px #0ff';
    comboDisplay.style.transform = 'scale(1.3)';
    setTimeout(() => {
        scoreDisplay.style.textShadow = '';
        comboDisplay.style.transform = 'scale(1)';
    }, 180);
}

function missNote() {
    combo = 0;
    comboDisplay.textContent = 'Miss!';
    comboDisplay.style.color = '#ff6f91';
    comboDisplay.style.transform = 'scale(1.3)';
    setTimeout(() => comboDisplay.style.transform = 'scale(1)', 180);
}

// ===============================
// 遊戲結束與分數結算
// ===============================
function endGame() {
    isPlaying = false;
    cancelAnimationFrame(animationId);
    if (endTimer) {
        clearTimeout(endTimer);
        endTimer = null;
    }
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
    
    // 停止遊戲音樂，恢復背景音樂
    audioManager.resumeBgm();
    
    // 增加遊戲次數
    gamePlayCount++;
    
    let grade = 'C';
    if (score >= 12000) grade = 'S';
    else if (score >= 9000) grade = 'A';
    else if (score >= 6000) grade = 'B';
    const timerDisplay = document.getElementById('timer-display');
    if (timerDisplay) timerDisplay.textContent = `剩餘：0.0 秒`;
    finalScore.textContent = `分數：${score}（最大Combo：${maxCombo}，本局60秒）`;
    finalGrade.textContent = `等級：${grade}`;
    showScreen('result');
}

// ===============================
// 輔助：自動 Miss 超時音符
// ===============================
setInterval(() => {
    if (!isPlaying) return;
    const now = (performance.now() - startTime) / 1000;
    const settings = difficultySettings[currentDifficulty];
    const noteHeight = 32;
    const judgeLineY = canvas.height - 100;
    
    for (let i = currentNoteIndex; i < notes.length; i++) {
        const note = notes[i];
        if (note.hit) continue;
        
        // 計算音符位置
        const y = (now - note.time) * (180 / settings.noteSpeed) + 60;
        
        // 如果音符超過判定線太多，自動 Miss
        if (y > judgeLineY + settings.judgementRange + noteHeight) {
            missNote();
            note.hit = true;
            if (i === currentNoteIndex) currentNoteIndex++;
        } else {
            break;
        }
    }
}, 60);

// ===============================
// 隱藏難度解鎖檢查
// ===============================
function checkHiddenDifficulty() {
    const hiddenDifficultyBtn = document.querySelector('.hidden-difficulty');
    if (hiddenDifficultyBtn) {
        if (gamePlayCount >= 3) {
            hiddenDifficultyBtn.style.display = 'inline-block';
            // 添加特殊效果
            hiddenDifficultyBtn.style.animation = 'glow 2s ease-in-out infinite alternate';
        } else {
            hiddenDifficultyBtn.style.display = 'none';
        }
    }
}

// ===============================
// 難度切換
// ===============================
function setDifficulty(diff) {
    currentDifficulty = diff;
    difficultyBtns.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.difficulty === diff);
    });
    updateStartBtnState();
}
difficultyBtns.forEach(btn => {
    btn.addEventListener('click', () => setDifficulty(btn.dataset.difficulty));
});
if (songSelect) {
    songSelect.addEventListener('change', () => {
        selectedSong = songSelect.value;
        updateStartBtnState();
    });
}

// ===============================
// 歌曲卡片互動
// ===============================
songCards.forEach(card => {
    card.addEventListener('click', () => {
        songCards.forEach(c => c.classList.remove('active'));
        card.classList.add('active');
        selectedSong = card.getAttribute('data-song');
        
        // 使用 audioManager 播放預覽音樂
        audioManager.playPreview(selectedSong);
        
        updateStartBtnState();
    });
});

// ===============================
// 初始化
// ===============================
showScreen('select');
resizeCanvas();
// 檢查隱藏難度解鎖狀態
checkHiddenDifficulty();
// 開始播放主選單背景音樂
audioManager.playBgm();
// 不預設難度與歌曲，需用戶選擇

// 讓開始按鈕只有在選擇了音樂和難度後才可按
function updateStartBtnState() {
    if (startBtn) {
        startBtn.disabled = !(selectedSong && currentDifficulty);
        startBtn.classList.toggle('disabled', startBtn.disabled);
    }
}

// 初始化時按鈕不可按
updateStartBtnState();

if (confirmBtn) confirmBtn.addEventListener('click', () => {
    // 使用 showScreen 函數正確切換畫面，避免跑版
    showScreen('select');
    // 停止試聽音樂，恢復背景音樂
    audioManager.stopPreview();
    // 檢查隱藏難度解鎖
    checkHiddenDifficulty();
    // 重設選擇狀態
    selectedSong = null;
    currentDifficulty = null;
    // 取消所有 song-card/difficulty-btn 的 active 樣式
    document.querySelectorAll('.song-card.active').forEach(el => el.classList.remove('active'));
    document.querySelectorAll('.difficulty-btn.active').forEach(el => el.classList.remove('active'));
    // 禁用開始按鈕
    updateStartBtnState();
}); 